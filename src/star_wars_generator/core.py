"""–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô 3D PERSPECTIVE STAR WARS GENERATOR
–° –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–ª–æ—Å—ã.
"""

import json
import os
import time

import cv2
import numpy as np
from moviepy.editor import *
from PIL import Image, ImageDraw, ImageFont


class Fixed3DStarWarsGeneratorV2:
    """Fixed 3D Star Wars style text crawler generator.

    This class generates Star Wars style scrolling text videos with 3D perspective
    effects, proper text positioning, and smooth animation.

    Attributes:
        width (int): Video width in pixels
        height (int): Video height in pixels
        fps (int): Frames per second for video output

    """

    # Magic number constants
    STAR_DENSITY_THRESHOLD = 0.05
    TEXT_HEIGHT_THRESHOLD = 10
    PROGRESS_THRESHOLD_HIGH = 0.95
    PROGRESS_THRESHOLD_LOW = 0.05
    FRAME_RATE_DIVISOR = 25
    PERSPECTIVE_DIVISOR = 2
    FADE_THRESHOLD = 0.98

    def __init__(self) -> None:
        """Initialize the generator with default video settings."""
        self.width = 1280
        self.height = 720
        self.fps = 24
        self.duration = 20  # –ë–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
        self.bg_color = (0, 0, 0)

        # 3D –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.vanishing_point_x = self.width // 2
        self.vanishing_point_y = self.height // 3
        self.perspective_angle = 30

        # –ö—ç—à–∏
        self.static_frames = {}
        self.text_strip = None

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.adaptive_duration = None

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∫–ª–æ–Ω–∞ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ)
        self.tilt_angle = 18.0  # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
        self.base_perspective = 0.4  # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
        self.max_perspective = 0.65  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å

    def load_config_dict(self, config: dict) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""
        self.config = config

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∫–ª–æ–Ω–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if "perspective" in config:
            perspective_config = config["perspective"]
            self.tilt_angle = perspective_config.get("tilt_angle", self.tilt_angle)
            self.base_perspective = perspective_config.get(
                "base_perspective", self.base_perspective
            )
            self.max_perspective = perspective_config.get(
                "max_perspective", self.max_perspective
            )
            print(
                f"üéØ Perspective settings: angle={self.tilt_angle}¬∞, base={self.base_perspective}, max={self.max_perspective}"
            )

        print(f"‚úÖ Config loaded from dict: {config}")

    def load_config_file(self, config_path: str) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(config_path, encoding="utf-8") as f:
                config = json.load(f)
                self.config = config

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∫–ª–æ–Ω–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if "perspective" in config:
                    perspective_config = config["perspective"]
                    self.tilt_angle = perspective_config.get(
                        "tilt_angle", self.tilt_angle
                    )
                    self.base_perspective = perspective_config.get(
                        "base_perspective", self.base_perspective
                    )
                    self.max_perspective = perspective_config.get(
                        "max_perspective", self.max_perspective
                    )
                    print(
                        f"üéØ Perspective settings: angle={self.tilt_angle}¬∞, base={self.base_perspective}, max={self.max_perspective}"
                    )

                print(f"‚úÖ Config loaded from file: {config_path}")
        except (FileNotFoundError, json.JSONDecodeError, KeyError) as e:
            print(f"‚ùå Config error loading {config_path}: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
            self.config = self.load_config()

    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if hasattr(self, "config") and self.config:
            print(f"‚úÖ Using loaded config: {self.config}")
            return self.config

        if os.path.exists("starwars_crawl.json"):
            try:
                with open("starwars_crawl.json", encoding="utf-8") as f:
                    config = json.load(f)
                    print(f"‚úÖ Config loaded: {config}")
                    return config
            except (FileNotFoundError, json.JSONDecodeError, PermissionError) as e:
                print(f"‚ùå Config error: {e}")

        # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        fallback = {
            "title": {
                "text": "Episode IV\nA NEW HOPE",
                "color": "#FFE81F",
                "font_size": 72,
            },
            "main_text": {
                "text": "It is a period of civil war.\n\nRebel spaceships, striking from\na hidden base, have won their\nfirst victory against the evil\nGalactic Empire.\n\nDuring the battle, Rebel spies\nmanaged to steal secret plans\nto the Empire's ultimate weapon,\nthe DEATH STAR, an armored\nspace station with enough power\nto destroy an entire planet.\n\nPursued by the Empire's sinister\nagents, Princess Leia races home\naboard her starship, custodian\nof the stolen plans that can save\nher people and restore freedom\nto the galaxy....",
                "color": "#FFE81F",
                "font_size": 48,
            },
        }
        print(f"‚ö†Ô∏è Using fallback config: {fallback}")
        return fallback

    def hex_to_rgb(self, hex_color: str) -> tuple[int, int, int]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç hex –≤ RGB."""
        hex_color = hex_color.lstrip("#")
        return tuple(int(hex_color[i : i + 2], 16) for i in (0, 2, 4))

    def create_starfield(self) -> np.ndarray:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–æ–Ω —Å–æ –∑–≤–µ–∑–¥–∞–º–∏."""
        background = np.zeros((self.height, self.width, 3), dtype=np.uint8)

        num_stars = 150
        np.random.seed(42)

        for _ in range(num_stars):
            x = np.random.randint(0, self.width)
            y = np.random.randint(0, self.height)
            brightness = np.random.randint(100, 255)
            background[y, x] = [brightness, brightness, brightness]

            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–≤–µ–∑–¥—ã –∫—Ä—É–ø–Ω–µ–µ
            if np.random.random() < self.STAR_DENSITY_THRESHOLD:
                if 1 <= x < self.width - 1 and 1 <= y < self.height - 1:
                    background[y - 1 : y + 2, x - 1 : x + 2] = [
                        brightness // 2,
                        brightness // 2,
                        brightness // 2,
                    ]

        return background

    def apply_perspective_transform(
        self, img: np.ndarray, progress: float
    ) -> np.ndarray:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ 3D –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Star Wars."""
        h, w = img.shape[:2]

        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø STAR WARS –ü–ï–†–°–ü–ï–ö–¢–ò–í–ê - –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ñ–∏–ª—å–º–∞
        # –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö –Ω–∞–∫–ª–æ–Ω –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15-20 –≥—Ä–∞–¥—É—Å–æ–≤

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        perspective_intensity = self.base_perspective + (
            (self.max_perspective - self.base_perspective) * progress
        )

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å (–¥–∞–ª–µ–∫–æ –≤ –∫–æ—Å–º–æ—Å–µ) - —Å—É–∂–∞–µ—Ç—Å—è
        top_width_ratio = 1.0 - perspective_intensity  # –û—Ç 0.6 –¥–æ 0.35
        top_width = int(w * top_width_ratio)

        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å (–±–ª–∏–∑–∫–æ –∫ –∑—Ä–∏—Ç–µ–ª—é) - –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        bottom_width_ratio = 1.0
        bottom_width = int(w * bottom_width_ratio)

        # –£–õ–£–ß–®–ï–ù–ù–´–ô –Ω–∞–∫–ª–æ–Ω - –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–π, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
        # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö
        angle_intensity = 0.7 + (0.3 * progress)  # –£—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞
        angle_radians = np.radians(self.tilt_angle * angle_intensity)
        vertical_tilt = int(
            h * np.tan(angle_radians) * 0.25
        )  # 25% –æ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∫–ª–æ–Ω–∞

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (—É–º–µ–Ω—å—à–µ–Ω–æ)
        scroll_offset = int(h * 0.02 * progress)

        # –ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ç–µ–∫—Å—Ç–∞)
        src_points = np.float32(
            [
                [0, 0],  # –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
                [w, 0],  # –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
                [w, h],  # –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
                [0, h],  # –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
            ]
        )

        # –£–õ–£–ß–®–ï–ù–ù–´–ï —Ü–µ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ - —Ç–æ—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è Star Wars
        top_margin = (w - top_width) // 2
        bottom_margin = (w - bottom_width) // 2

        # –†–∞—Å—á–µ—Ç —Ç–æ—á–µ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∫–ª–æ–Ω–æ–º
        top_y = -vertical_tilt - scroll_offset
        bottom_y = h + vertical_tilt + scroll_offset

        dst_points = np.float32(
            [
                [top_margin, top_y],  # –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π (—É–∑–∫–æ, –≤—ã—Å–æ–∫–æ)
                [w - top_margin, top_y],  # –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π (—É–∑–∫–æ, –≤—ã—Å–æ–∫–æ)
                [w - bottom_margin, bottom_y],  # –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π (—à–∏—Ä–æ–∫–æ, –Ω–∏–∑–∫–æ)
                [bottom_margin, bottom_y],  # –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π (—à–∏—Ä–æ–∫–æ, –Ω–∏–∑–∫–æ)
            ]
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        matrix = cv2.getPerspectiveTransform(src_points, dst_points)

        # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–∞–∫–ª–æ–Ω–∞
        result_height = h + 2 * (vertical_tilt + scroll_offset) + 100
        result_width = w + 50  # –ù–µ–±–æ–ª—å—à–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ

        result = cv2.warpPerspective(
            img,
            matrix,
            (result_width, result_height),
            flags=cv2.INTER_LINEAR,
            borderMode=cv2.BORDER_CONSTANT,
            borderValue=(0, 0, 0),
        )

        # –û–±—Ä–µ–∑–∞–µ–º –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.shape[0] >= h and result.shape[1] >= w:
            start_y = max(0, (result.shape[0] - h) // 2)
            start_x = max(0, (result.shape[1] - w) // 2)
            return result[start_y : start_y + h, start_x : start_x + w]

        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ–Ω—å—à–µ, –¥–æ–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–Ω—ã–º –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        padded = np.zeros((h, w, 3), dtype=np.uint8)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        start_y = max(0, (h - result.shape[0]) // 2)
        end_y = min(h, start_y + result.shape[0])

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        start_x = max(0, (w - result.shape[1]) // 2)
        end_x = min(w, start_x + result.shape[1])

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        result_h = min(result.shape[0], end_y - start_y)
        result_w = min(result.shape[1], end_x - start_x)

        padded[start_y : start_y + result_h, start_x : start_x + result_w] = result[
            :result_h, :result_w
        ]

        return padded

    def create_text_strip(self, text: str, fontsize: int, color: str) -> np.ndarray:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–ª–æ—Å—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        print(f"üé® Creating OPTIMIZED text strip: '{text[:50]}...'")
        print(f"   Font size: {fontsize}, Color: {color}")

        # –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        strip_height = self.height * 3  # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∞ 2160px
        img = Image.new("RGB", (self.width, strip_height), (0, 0, 0))
        draw = ImageDraw.Draw(img)

        try:
            font = ImageFont.truetype("C:/Windows/Fonts/arial.ttf", fontsize)
            print("‚úÖ Arial font loaded")
        except:
            font = ImageFont.load_default()
            print("‚ö†Ô∏è Using default font")

        rgb_color = self.hex_to_rgb(color)
        print(f"   RGB color: {rgb_color}")

        # –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–æ –≤—Å–µ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
        lines = text.replace("\n\n", "\n \n").split("\n")
        line_height = fontsize + 15

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º scroll range (–∫–∞–∫ –≤ create_3d_frame)
        start_offset = strip_height // 2 - self.height // 4  # 900
        end_offset = strip_height // 2 + self.height // 2  # 1440

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–∏–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_center = (start_offset + end_offset) // 2  # 1170
        total_text_height = len([line for line in lines if line.strip()]) * line_height

        # –†–∞–∑–º–µ—â–∞–µ–º —Ü–µ–Ω—Ç—Ä —Ç–µ–∫—Å—Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        y_start = scroll_center - total_text_height // 2

        print("   üìç OPTIMIZED positioning:")
        print(f"   Strip height: {strip_height}")
        print(
            f"   Scroll range: {start_offset} - {end_offset} (center: {scroll_center})"
        )
        print(f"   Text height: {total_text_height}")
        print(f"   Starting y_pos: {y_start} (optimized for full visibility)")

        total_lines = 0
        text_positions = []
        current_y = y_start

        for line in lines:
            if line.strip():  # –ù–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                bbox = draw.textbbox((0, 0), line, font=font)
                text_width = bbox[2] - bbox[0]
                x = (self.width - text_width) // 2
                draw.text((x, current_y), line, font=font, fill=rgb_color)
                text_positions.append(current_y)
                total_lines += 1
            current_y += line_height

        if text_positions:
            text_top = min(text_positions)
            text_bottom = max(text_positions)
            print(f"   Text spans: y={text_top} to y={text_bottom}")

        print("‚úÖ OPTIMIZED text strip created:")
        print(f"   Total lines: {total_lines}")
        print(f"   Strip height: {strip_height}")

        text_array = np.array(img)
        print(f"   Text array shape: {text_array.shape}")

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        non_black_pixels = np.sum(text_array > self.TEXT_HEIGHT_THRESHOLD)
        text_coverage = non_black_pixels / (strip_height * self.width) * 100
        print(f"   Non-black pixels: {non_black_pixels}")
        print(f"   Text coverage: {text_coverage:.2f}%")

        return text_array

    def create_3d_frame(self, progress: float) -> np.ndarray:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞–¥—Ä —Å 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."""
        if progress == 0:
            print(f"üé¨ Creating 3D frame, progress: {progress:.3f}")

        background = self._ensure_starfield_background()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–ª–æ—Å—É (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        self._ensure_text_strip()

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        offset = self._calculate_scroll_offset(progress)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–∫—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
        text_section = self._extract_text_section(offset, progress)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º 3D –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É
        perspective_text = self.apply_perspective_transform(text_section, progress)

        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Å —Ñ–æ–Ω–æ–º
        return self._blend_text_with_background(background, perspective_text, progress)

    def _ensure_starfield_background(self) -> np.ndarray:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω —Å–æ –∑–≤–µ–∑–¥–∞–º–∏."""
        if "starfield" not in self.static_frames:
            print("‚≠ê Creating and caching starfield background...")
            self.static_frames["starfield"] = self.create_starfield()
        return self.static_frames["starfield"].copy()

    def _ensure_text_strip(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–ª–æ—Å—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
        if self.text_strip is None:
            print("üìù Initializing text strip...")
            config = self.load_config()
            main_config = config.get("main_text", {})

            text = main_config.get("text", "DEFAULT SCROLLING TEXT")
            fontsize = main_config.get("font_size", 48)
            color = main_config.get("color", "#FFE81F")

            print(f"   Text preview: '{text[:100]}...'")
            print(f"   Font size: {fontsize}")
            print(f"   Color: {color}")

            self.text_strip = self.create_text_strip(text, fontsize, color)

    def _calculate_scroll_offset(self, progress: float) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
        strip_height = self.text_strip.shape[0]
        max_offset = strip_height - self.height

        if self.text_strip is not None:
            # –ù–∞–π–¥–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–æ—Å–µ
            non_black_mask = np.any(self.text_strip > 0, axis=2)
            if np.any(non_black_mask):
                y_coords, _ = np.where(non_black_mask)
                actual_text_top = np.min(y_coords)
                actual_text_bottom = np.max(y_coords)

                # –†–∞—Å—Å—á–∏—Ç–∞–µ–º scroll range –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                start_offset = max(0, actual_text_bottom - self.height)
                end_offset = min(strip_height - self.height, actual_text_top)

                if (
                    progress in [0, 0.25, 0.5, 0.75, 1.0]
                    or progress > self.PROGRESS_THRESHOLD_HIGH
                ):
                    print("   üìä ADAPTIVE scroll logic:")
                    print(f"      Text range: {actual_text_top}-{actual_text_bottom}")
                    print(f"      Adaptive scroll range: {start_offset}-{end_offset}")
            else:
                # Fallback –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                start_offset = strip_height // 2 - self.height // 4
                end_offset = strip_height // 2 + self.height // 2
        else:
            # Fallback –µ—Å–ª–∏ text_strip –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            start_offset = strip_height // 2 - self.height // 4
            end_offset = strip_height // 2 + self.height // 2

        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è offset –Ω–∞ –æ—Å–Ω–æ–≤–µ progress
        offset = int(start_offset + (end_offset - start_offset) * progress)
        return max(0, min(offset, max_offset))

    def _extract_text_section(self, offset: int, progress: float) -> np.ndarray:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞."""
        strip_height = self.text_strip.shape[0]

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        end_pos = min(offset + self.height, strip_height)
        text_section = self.text_strip[offset:end_pos]

        # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–π –≤—ã—Å–æ—Ç—ã, –¥–æ–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–Ω—ã–º
        if text_section.shape[0] < self.height:
            padded_section = np.zeros((self.height, self.width, 3), dtype=np.uint8)
            padded_section[: text_section.shape[0]] = text_section
            text_section = padded_section

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞
        non_black_threshold = 20
        non_black_in_section = np.sum(text_section > non_black_threshold)

        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤
        if progress in [0, 0.25, 0.5, 0.75, 1.0] or non_black_in_section == 0:
            print("   üîç Section analysis:")
            print(f"      Section shape: {text_section.shape}")
            print(f"      Non-black pixels: {non_black_in_section}")
            print(
                f"      Text coverage: {non_black_in_section / (self.width * self.height) * 100:.1f}%"
            )

            if non_black_in_section == 0:
                print("   ‚ö†Ô∏è WARNING: Empty section detected!")
                print(f"   ‚ö†Ô∏è Offset: {offset}, Strip height: {strip_height}")
                print("   ‚ö†Ô∏è This indicates text positioning issues")

        return text_section

    def _blend_text_with_background(
        self, background: np.ndarray, perspective_text: np.ndarray, progress: float
    ) -> np.ndarray:
        """–°–º–µ—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–æ–π —Å —Ñ–æ–Ω–æ–º."""
        non_black_threshold = 20

        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        text_mask = np.any(perspective_text > non_black_threshold, axis=2)
        text_pixel_count = np.sum(text_mask)

        if text_pixel_count == 0:
            if (
                progress > self.PROGRESS_THRESHOLD_HIGH
                or progress < self.PROGRESS_THRESHOLD_LOW
            ):
                print("   ‚ö†Ô∏è No text pixels after perspective transform")
            return background

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è
        result = background.copy()
        result[text_mask] = perspective_text[text_mask]

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤
        if progress in [0, 0.25, 0.5, 0.75, 1.0]:
            coverage = text_pixel_count / (self.width * self.height) * 100
            print(
                f"   ‚úÖ 3D frame: {text_pixel_count} text pixels ({coverage:.1f}% coverage)"
            )

        return result

    def create_static_frame(self, text: str, fontsize: int, color: str) -> np.ndarray:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–¥—Ä –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
        print(f"üè∑Ô∏è Creating static frame: '{text}', size: {fontsize}, color: {color}")

        background = self.create_starfield()
        img = Image.new("RGBA", (self.width, self.height), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)

        try:
            font = ImageFont.truetype("C:/Windows/Fonts/arial.ttf", fontsize)
        except:
            font = ImageFont.load_default()

        rgb_color = self.hex_to_rgb(color)

        lines = text.split("\n")
        total_height = len(lines) * (fontsize + 10)
        start_y = (self.height - total_height) // 2

        for i, line in enumerate(lines):
            if line.strip():
                bbox = draw.textbbox((0, 0), line, font=font)
                text_width = bbox[2] - bbox[0]
                x = (self.width - text_width) // 2
                y = start_y + i * (fontsize + 10)
                draw.text((x, y), line, font=font, fill=rgb_color)

        text_array = np.array(img)
        alpha = text_array[:, :, 3:4] / 255.0
        text_rgb = text_array[:, :, :3]

        result = background * (1 - alpha) + text_rgb * alpha

        print("‚úÖ Static frame created")

        return result.astype(np.uint8)

    def generate_video(self, output_file: str = "starwars_crawl.mp4") -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ (–∞–ª–∏–∞—Å –¥–ª—è generate_3d_video)."""
        self.generate_3d_video(output_file)

    def generate_3d_video(
        self, output_file: str = "starwars_crawl_3d_optimized.mp4"
    ) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π."""
        print("üé¨ OPTIMIZED 3D PERSPECTIVE Star Wars Generator V2")
        print("=" * 60)

        config = self.load_config()
        start_time = time.time()

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ü—Ä–µ–¥—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞–¥—Ä–æ–≤
        print("üé® Pre-rendering static frames...")

        title_config = config.get("title", {})
        title_frame = self.create_static_frame(
            title_config.get("text", "Episode IV\nA NEW HOPE"),
            title_config.get("font_size", 72),
            title_config.get("color", "#FFE81F"),
        )
        self.static_frames["title"] = title_frame

        stars_frame = self.create_starfield()
        self.static_frames["stars"] = stars_frame

        # –ü—Ä–µ–¥—ã–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–ª–æ—Å—É —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        print("üìù Pre-initializing optimized text strip...")
        main_config = config.get("main_text", {})
        text_content = main_config.get("text", "DEFAULT TEXT")

        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
        main_config = config.get("main_text", {})
        text_content = main_config.get("text", "DEFAULT TEXT")

        if self.adaptive_duration is None:
            self.adaptive_duration = self.calculate_adaptive_duration(text_content)
            self.duration = self.adaptive_duration
            print(f"üéØ Using adaptive duration: {self.duration:.1f} seconds")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        text_lines = len(
            [
                line
                for line in text_content.replace("\n\n", "\n").split("\n")
                if line.strip()
            ]
        )
        text_words = len(text_content.split())
        estimated_read_time = text_words / 200 * 60  # 200 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É

        print("üìä Text analysis:")
        print(f"   Lines: {text_lines}")
        print(f"   Words: {text_words}")
        print(f"   Estimated reading time: {estimated_read_time:.1f} seconds")

        self.text_strip = self.create_text_strip(
            text_content,
            main_config.get("font_size", 48),
            main_config.get("color", "#FFE81F"),
        )

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        title_duration = 2.5
        stars_pause = 1.0
        scroll_start = title_duration + stars_pause
        scroll_duration = self.duration - scroll_start

        print("‚è±Ô∏è Timing optimization:")
        print(f"   Title duration: {title_duration}s")
        print(f"   Stars pause: {stars_pause}s")
        print(f"   Scroll duration: {scroll_duration}s")
        print(f"   Total duration: {self.duration}s")

        frame_count = 0
        last_progress_report = 0

        def make_frame(t: float) -> np.ndarray:
            """–°–æ–∑–¥–∞–µ—Ç –∫–∞–¥—Ä –≤–∏–¥–µ–æ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π."""
            nonlocal frame_count, last_progress_report
            frame_count += 1

            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∫–∞–∂–¥—ã–µ 25% –∏–ª–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            progress_percent = (t / self.duration) * 100
            if progress_percent - last_progress_report >= self.FRAME_RATE_DIVISOR or (
                t - last_progress_report >= self.PERSPECTIVE_DIVISOR and t > 0
            ):
                print(
                    f"\n‚è±Ô∏è Video progress: {progress_percent:.1f}% (t={t:.2f}s, frame #{frame_count})"
                )
                last_progress_report = progress_percent

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–¥—Ä–æ–≤
            if t <= title_duration:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–¥—Ä
                if frame_count == 1:
                    print("   üìã Using cached title frame")
                return self.static_frames["title"]

            if t <= scroll_start:
                # –ü–∞—É–∑–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–¥—Ä
                if t <= title_duration + 0.1:  # –ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    print("   ‚≠ê Using cached stars frame")
                return self.static_frames["stars"]

            # 3D –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            scroll_progress = min((t - scroll_start) / scroll_duration, 1.0)

            # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
            if scroll_progress in [0] or (scroll_progress > self.FADE_THRESHOLD):
                print(f"   üé¨ 3D scroll: progress {scroll_progress:.3f}")
                print(
                    f"      Time in scroll: {t - scroll_start:.1f}s / {scroll_duration:.1f}s"
                )

            return self.create_3d_frame(scroll_progress)

        print("üöÄ Creating optimized video with REAL 3D perspective...")
        video_clip = VideoClip(make_frame, duration=self.duration)

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        print(f"ÔøΩ Exporting to {output_file} with optimized settings...")
        export_start = time.time()

        video_clip.write_videofile(
            output_file,
            fps=self.fps,
            codec="libx264",
            preset="fast",  # –ë—ã—Å—Ç—Ä–µ–µ —á–µ–º medium
            threads=6,  # –ë–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤
            bitrate="5000k",  # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            verbose=False,
            logger=None,
        )

        export_time = time.time() - export_start
        total_time = time.time() - start_time

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("=" * 60)
        print("‚úÖ OPTIMIZED 3D Perspective video created!")
        print(f"üìÅ File: {output_file}")
        print("üìä Statistics:")
        print(f"   Total frames rendered: {frame_count}")
        print(f"   Rendering time: {total_time - export_time:.2f}s")
        print(f"   Export time: {export_time:.2f}s")
        print(f"   Total time: {total_time:.2f}s")
        print(
            f"   Avg FPS during render: {frame_count / (total_time - export_time):.1f}"
        )
        print("üåü Features:")
        print("   ‚úÖ ADAPTIVE text strip sizing")
        print("   ‚úÖ OPTIMIZED frame caching")
        print("   ‚úÖ REAL 3D perspective transformation")
        print("   ‚úÖ SMART empty frame detection")
        print("   ‚úÖ DETAILED progress reporting")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if os.path.exists(output_file):
            file_size = os.path.getsize(output_file) / (1024 * 1024)  # MB
            print(f"üì¶ File size: {file_size:.1f} MB")

        return output_file

    def calculate_adaptive_duration(self, text: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞."""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        words = len(text.split())
        lines = len(
            [line for line in text.replace("\n\n", "\n").split("\n") if line.strip()]
        )
        paragraphs = len([p for p in text.split("\n\n") if p.strip()])

        # –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        title_time = 2.5
        stars_pause = 1.0

        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
        # –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 150 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        reading_speed_wpm = 150
        base_scroll_time = (words / reading_speed_wpm) * 60

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        line_factor = lines * 0.3  # –ë–æ–ª—å—à–µ —Å—Ç—Ä–æ–∫ = –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
        paragraph_factor = paragraphs * 0.5  # –ü–∞—É–∑—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        min_scroll_time = 8.0
        max_scroll_time = 30.0

        adjusted_scroll_time = base_scroll_time + line_factor + paragraph_factor
        scroll_time = max(min_scroll_time, min(adjusted_scroll_time, max_scroll_time))

        total_duration = title_time + stars_pause + scroll_time

        print("üìä Adaptive duration calculation:")
        print(f"   Words: {words}, Lines: {lines}, Paragraphs: {paragraphs}")
        print(f"   Base reading time: {base_scroll_time:.1f}s")
        print(f"   Adjusted scroll time: {scroll_time:.1f}s")
        print(f"   Total duration: {total_duration:.1f}s")

        return total_duration


if __name__ == "__main__":
    print("üé¨ Creating Star Wars video with REAL 3D perspective effect...")
    print("üêõ DEBUG VERSION - shows detailed output")

    generator = Fixed3DStarWarsGeneratorV2()
    output_file = generator.generate_3d_video()

    print(f"\nüéâ SUCCESS! Video created: {output_file}")
    print("üéØ This version has ACTUAL 3D perspective transformation!")
    print("üìê You should now see the text getting narrower as it moves away!")
    print("üêõ Check the debug output above to see what happened with text rendering")
