[project]
name = "star-war-crawler"
version = "1.0.0"
description = "Star Wars style text crawler with 3D perspective effects"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "moviepy>=1.0.3",
    "pillow>=10.0.0",
    "numpy>=1.24.0",
    "opencv-python>=4.8.0",
]

[project.scripts]
starwars-cli = "star_wars_generator.cli:main"

[project.optional-dependencies]
dev = [
    "ruff>=0.4.7",
    "pytest>=7.0.0",
    "pre-commit>=3.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "T201",  # print statements allowed for CLI tools
    "S602",  # subprocess with shell=True allowed for build scripts
    "RUF001", "RUF002", "RUF003",  # Unicode ambiguity checks - allow Cyrillic
    "E501",  # Line too long - let formatter handle
    "ERA001",  # Commented code allowed in tests
    "TD002", "TD003", "FIX002",  # TODO formatting
    "PLR0913", "PLR0915", "PLR0911",  # Function complexity limits
    "COM812",  # Trailing comma conflicts with formatter
    "BLE001",  # Blind except allowed for CLI error handling
    "TRY300",  # Try-except-else formatting
    "F403", "F405",  # Star imports allowed in __init__.py
    "PTH110", "PTH123", "PTH202", "PTH108",  # Use pathlib - can be fixed later
    "NPY002",  # Legacy numpy - can be updated later
    "SIM102",  # Nested if statements
    "E722",   # Bare except allowed for fallback error handling
    "S101",   # Assert allowed in tests
    "ANN201",  # Return type annotation - can be added later
    "D205",   # Docstring formatting
    "PLR2004"  # Magic values
]  # Включить все правила согласно гайдлайну
unfixable = ["F841"]  # Не автофиксить неиспользуемые переменные

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101"]  # Разрешить assert в тестах
"experiments/**/*" = ["ALL"]  # Игнорировать все правила в экспериментах

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["star_wars_generator", "utils"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Кастомные команды для аудита
[tool.rye.scripts]
ruff-format = "ruff format ."
lint = "ruff check ."
lint-fix = "ruff check . --fix"
dead-code-audit = { chain = [
    "ruff check --select F401,F841 src/",
    "uv pip list --outdated",
]}
test = "pytest tests/"
clean = { chain = [
    "ruff format .",
    "ruff check . --fix",
]}
